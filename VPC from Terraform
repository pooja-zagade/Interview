provider "aws" {
  region = "us-east-1"   # Hardcoded region
}

# -------------------------
# VPC
# -------------------------
resource "aws_vpc" "my_vpc" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true
  instance_tenancy     = "default"

  tags = {
    Name = "Hardcoded-VPC"
  }
}

# -------------------------
# Subnet
# -------------------------
resource "aws_subnet" "my_subnet" {
  vpc_id                  = aws_vpc.my_vpc.id
  cidr_block              = "10.0.1.0/24"
  availability_zone       = "us-east-1a"
  map_public_ip_on_launch = true

  tags = {
    Name = "Hardcoded-Subnet"
  }
}

# -------------------------
# Internet Gateway
# -------------------------
resource "aws_internet_gateway" "my_igw" {
  vpc_id = aws_vpc.my_vpc.id

  tags = {
    Name = "Hardcoded-IGW"
  }
}

# -------------------------
# Route Table
# -------------------------
resource "aws_route_table" "my_rt" {
  vpc_id = aws_vpc.my_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.my_igw.id
  }

  tags = {
    Name = "Hardcoded-Route-Table"
  }
}

# -------------------------
# Route Table Association
# -------------------------
resource "aws_route_table_association" "my_rta" {
  subnet_id      = aws_subnet.my_subnet.id
  route_table_id = aws_route_table.my_rt.id
}

# -------------------------
# Outputs
# -------------------------
output "vpc_id" {
  value = aws_vpc.my_vpc.id
}

output "subnet_id" {
  value = aws_subnet.my_subnet.id
}

output "internet_gateway_id" {
  value = aws_internet_gateway.my_igw.id
}

output "route_table_id" {
  value = aws_route_table.my_rt.id
}

output "subnet_cidr_block" {
  value = aws_subnet.my_subnet.cidr_block
}

# Explanation 

This Terraform configuration creates a complete AWS networking setup.

1️⃣ Provider:

provider "aws" specifies that we are using AWS as our cloud provider and sets the region to us-east-1.
This tells Terraform where to create the resources.

2️⃣ VPC:

aws_vpc creates a Virtual Private Cloud with CIDR 10.0.0.0/16.
enable_dns_support and enable_dns_hostnames are set to true so that instances inside the VPC can resolve DNS names.
instance_tenancy is set to default, allowing both dedicated and shared tenancy.
A tag is added for easy identification in the AWS console.

3️⃣ Subnet:

aws_subnet creates a subnet inside the VPC with CIDR 10.0.1.0/24.
map_public_ip_on_launch ensures instances launched in this subnet get public IP addresses automatically.
We also specify an availability zone (us-east-1a) and add a name tag.

4️⃣ Internet Gateway (IGW):

aws_internet_gateway attaches to the VPC, allowing instances in the subnet to access the internet.

5️⃣ Route Table & Association:

aws_route_table defines a route table with a default route (0.0.0.0/0) pointing to the IGW.
aws_route_table_association associates the route table with the subnet so instances can use it to reach the internet.

6️⃣ Outputs:

The output blocks display important resource IDs and the subnet CIDR block.
This is useful when referencing these resources in other Terraform files or modules.

Summary:
In short, this single Terraform file creates a fully functional VPC with a public subnet and internet access, all hardcoded for simplicity, and provides outputs for easy reference.
